; Listing generated by Microsoft (R) Optimizing Compiler Version 19.26.28806.0 

	TITLE	c:\users\neonik\desktop\csgo cheat sources\otc-source\otc\cpp\frameworks\segmentframework.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@ ; `string'
PUBLIC	??_C@_0BA@GHAAJBKB@steamclient?4dll@		; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	__imp____std_terminate:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp____std_exception_copy:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp____std_exception_destroy:PROC
EXTRN	__imp____CxxFrameHandler3:PROC
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHAAJBKB@steamclient?4dll@
CONST	SEGMENT
??_C@_0BA@GHAAJBKB@steamclient?4dll@ DB 'steamclient.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
CONST	SEGMENT
??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@ DB 'Allocation pointe'
	DB	'r is null.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
PUBLIC	??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z	; std::_Copy_memmove<unsigned long *,unsigned long *>
PUBLIC	??$_Copy_memmove@PAPBDPAPBD@std@@YAPAPBDPAPBD00@Z ; std::_Copy_memmove<char const * *,char const * *>
PUBLIC	??$_Unfancy@PBD@std@@YAPAPBDPAPBD@Z		; std::_Unfancy<char const *>
PUBLIC	??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,std::allocator<unsigned long> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Get_unwrapped@ABQAK@std@@YAPAKABQAK@Z	; std::_Get_unwrapped<unsigned long * const &>
PUBLIC	??$_Get_unwrapped@ABQAPBD@std@@YAPAPBDABQAPBD@Z	; std::_Get_unwrapped<char const * * const &>
PUBLIC	??$_Uninitialized_copy@PAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD0PAPBDAAV?$allocator@PBD@0@@Z ; std::_Uninitialized_copy<char const * *,std::allocator<char const *> >
PUBLIC	??$forward@V?$allocator@PBD@std@@@std@@YA$$QAV?$allocator@PBD@0@AAV10@@Z ; std::forward<std::allocator<char const *> >
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned long> >::max_size
PUBLIC	?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
PUBLIC	?_Umove_if_noexcept1@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00U?$integral_constant@_N$00@2@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept1
PUBLIC	??0?$allocator@K@std@@QAE@XZ			; std::allocator<unsigned long>::allocator<unsigned long>
PUBLIC	?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
PUBLIC	?_Umove@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove
PUBLIC	?_Umove_if_noexcept@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@KV?$allocator@K@std@@@std@@ABEII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Change_array
PUBLIC	?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
PUBLIC	??0?$_Vector_val@U?$_Simple_types@K@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned long> >::_Vector_val<std::_Simple_types<unsigned long> >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBDQAPBDAAV?$allocator@PBD@0@@Z ; std::_Destroy_range<std::allocator<char const *> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1><>
PUBLIC	??$_Unfancy_maybe_null@K@std@@YAPAKPAK@Z	; std::_Unfancy_maybe_null<unsigned long>
PUBLIC	??$_Ucopy@PAPBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPAPBD00@Z ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * *>
PUBLIC	??$?0V?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PBD@1@@Z ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> >
PUBLIC	??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>
PUBLIC	??$construct@KK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAK$$QAK@Z ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long>
PUBLIC	??$_Unfancy@K@std@@YAPAKPAK@Z			; std::_Unfancy<unsigned long>
PUBLIC	??$forward@K@std@@YA$$QAKAAK@Z			; std::forward<unsigned long>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@K@std@@QAEXQAKI@Z	; std::allocator<unsigned long>::deallocate
PUBLIC	?allocate@?$allocator@K@std@@QAEPAKI@Z		; std::allocator<unsigned long>::allocate
PUBLIC	?_Destroy@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$allocator@K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z	; std::allocator<char const *>::deallocate
PUBLIC	?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z	; std::allocator<char const *>::allocate
PUBLIC	?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z ; std::vector<char const *,std::allocator<char const *> >::_Destroy
PUBLIC	?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
PUBLIC	?_Tidy@?$vector@KV?$allocator@K@std@@@std@@AAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
PUBLIC	?_Getal@?$vector@KV?$allocator@K@std@@@std@@ABEABV?$allocator@K@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$allocator@K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SA?AV?$allocator@PBD@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char const *> >::select_on_container_copy_construction
PUBLIC	?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy_raw
PUBLIC	?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ ; std::vector<char const *,std::allocator<char const *> >::_Tidy
PUBLIC	?_Xrange@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xrange
PUBLIC	?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@ABEABV?$allocator@PBD@2@XZ ; std::vector<char const *,std::allocator<char const *> >::_Getal
PUBLIC	??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >::~_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >
PUBLIC	??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	?data@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::data
PUBLIC	?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@ABEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range
PUBLIC	?_Getal@?$vector@KV?$allocator@K@std@@@std@@AAEAAV?$allocator@K@2@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Getal
PUBLIC	?_Unchecked_begin@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_end
PUBLIC	??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
PUBLIC	??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
PUBLIC	?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end
PUBLIC	?at@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEAAPBDI@Z ; std::vector<char const *,std::allocator<char const *> >::at
PUBLIC	?SetMenuStatus@SegmentFramework@@QAEX_N@Z	; SegmentFramework::SetMenuStatus
PUBLIC	?UpdateMenuWatermark@SegmentFramework@@QAEXPBD@Z ; SegmentFramework::UpdateMenuWatermark
PUBLIC	?UpdateWatermark@SegmentFramework@@QAEXPBD0@Z	; SegmentFramework::UpdateWatermark
PUBLIC	?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z ; SegmentFramework::CustomVirtualCaller
PUBLIC	?CreateHook@SegmentFramework@@QAEXXZ		; SegmentFramework::CreateHook
PUBLIC	?UpdateNetVars@SegmentFramework@@QAEXXZ		; SegmentFramework::UpdateNetVars
PUBLIC	?__autoclassinit2@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::__autoclassinit2
PUBLIC	??$_Emplace_back_with_unused_capacity@K@?$vector@KV?$allocator@K@std@@@std@@AAEAAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long>
PUBLIC	??$emplace_back@K@?$vector@KV?$allocator@K@std@@@std@@QAEAAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::emplace_back<unsigned long>
PUBLIC	?CreateDependencyTable@SegmentFramework@@QAEXXZ	; SegmentFramework::CreateDependencyTable
PUBLIC	?GetSafeAllocationPointer@Segment@@SAKXZ	; Segment::GetSafeAllocationPointer
PUBLIC	?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ	; std::_Fake_proxy_ptr_impl::_Release
PUBLIC	??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
PUBLIC	?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ; std::_Container_base0::_Alloc_proxy
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??2@YAPAXIPAX@Z					; operator new
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	___std_terminate:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CreateDependencyTable@SegmentFramework@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateDependencyTable@SegmentFramework@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateDependencyTable@SegmentFramework@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDependencyTable@SegmentFramework@@QAEXXZ$0
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; __Size$dead$ = ecx
; __Where$ = edx

; 170  :         (void)_Size;
; 171  :         return _Where;

  00000	8b c2		 mov	 eax, edx

; 172  :     }

  00002	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 66   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :         _Data._What = _Message;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  0000f	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0
  00014	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 68   :     }

  00017	8b c1		 mov	 eax, ecx
  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_copy
  00024	83 c4 08	 add	 esp, 8

; 74   :     }

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00010	59		 pop	 ecx

; 91   :     }

  00011	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00016	83 c4 04	 add	 esp, 4
  00019	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001d	74 0b		 je	 SHORT $LN6@scalar
  0001f	6a 0c		 push	 12			; 0000000cH
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN6@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 130  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 67   :         _Data._What = _Message;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Message$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 65   :         : _Data()

  00009	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000e	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 131  :     }

  00011	8b c1		 mov	 eax, ecx
  00013	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_alloc@std@@6B@
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00016	83 c4 04	 add	 esp, 4
  00019	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001d	74 0b		 je	 SHORT $LN9@scalar
  0001f	6a 0c		 push	 12			; 0000000cH
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN9@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00010	59		 pop	 ecx
  00011	c3		 ret	 0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00016	83 c4 04	 add	 esp, 4
  00019	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001d	74 0b		 je	 SHORT $LN12@scalar
  0001f	6a 0c		 push	 12			; 0000000cH
  00021	56		 push	 esi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
$LN12@scalar:
  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_destroy
  00010	59		 pop	 ecx
  00011	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 324  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 325  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_copy
  00024	83 c4 08	 add	 esp, 8
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____std_exception_copy
  00024	83 c4 08	 add	 esp, 8
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002d	8b c6		 mov	 eax, esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 558  :         return INT_MAX;

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 559  :     }

  00005	c3		 ret	 0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT
; __Bytes$ = ecx

; 51   :         return ::operator new(_Bytes);

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00006	83 c4 04	 add	 esp, 4

; 52   :     }

  00009	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT
; __Ptr$ = ecx
; __Bytes$ = edx

; 107  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 108  :     _Bytes += _Non_user_size;

  00000	83 02 23	 add	 DWORD PTR [edx], 35	; 00000023H

; 109  : 
; 110  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);
; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00008	2b c2		 sub	 eax, edx

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0000a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0000d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00010	77 03		 ja	 SHORT $LN7@Adjust_man

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00012	89 11		 mov	 DWORD PTR [ecx], edx

; 127  : }

  00014	c3		 ret	 0
$LN7@Adjust_man:

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 1061 :     void _Orphan_all() noexcept {}

  00000	c2 00 00	 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z PROC ; std::_Container_base0::_Alloc_proxy, COMDAT
; _this$dead$ = ecx

; 1063 :     void _Alloc_proxy(const _Fake_allocator&) noexcept {}

  00000	c2 04 00	 ret	 4
?_Alloc_proxy@_Container_base0@std@@QAEXABU_Fake_allocator@2@@Z ENDP ; std::_Container_base0::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z PROC ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl, COMDAT
; _this$ = ecx

; 1251 :     _Fake_proxy_ptr_impl(const _Fake_allocator&, const _Container_base0&) noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 08 00	 ret	 8
??0_Fake_proxy_ptr_impl@std@@QAE@ABU_Fake_allocator@1@ABU_Container_base0@1@@Z ENDP ; std::_Fake_proxy_ptr_impl::_Fake_proxy_ptr_impl
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ
_TEXT	SEGMENT
?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ PROC		; std::_Fake_proxy_ptr_impl::_Release, COMDAT
; _this$dead$ = ecx

; 1254 :     void _Release() noexcept {}

  00000	c2 00 00	 ret	 0
?_Release@_Fake_proxy_ptr_impl@std@@QAEXXZ ENDP		; std::_Fake_proxy_ptr_impl::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\headers\segment\Segment.h
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\headers\segment\Segment.h
;	COMDAT ?GetSafeAllocationPointer@Segment@@SAKXZ
_TEXT	SEGMENT
?GetSafeAllocationPointer@Segment@@SAKXZ PROC		; Segment::GetSafeAllocationPointer, COMDAT
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00005	85 c0		 test	 eax, eax
  00007	75 0d		 jne	 SHORT $LN4@GetSafeAll

; 14   :         PanicUtils::Release (layer, reason);

  00009	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0000e	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00011	e9 00 00 00 00	 jmp	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN4@GetSafeAll:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\headers\segment\Segment.h

; 26   : 	}

  00016	c3		 ret	 0
?GetSafeAllocationPointer@Segment@@SAKXZ ENDP		; Segment::GetSafeAllocationPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
;	COMDAT ?CreateDependencyTable@SegmentFramework@@QAEXXZ
_TEXT	SEGMENT
tv763 = -40						; size = 4
_this$GSCopy$1$ = -36					; size = 4
__Rightlast$1$ = -36					; size = 4
__Rightfirst$1$ = -32					; size = 4
_module$1$ = -32					; size = 4
$T3 = -32						; size = 4
$T2 = -32						; size = 4
_info$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CreateDependencyTable@SegmentFramework@@QAEXXZ PROC	; SegmentFramework::CreateDependencyTable, COMDAT
; _this$ = ecx

; 5    : void SegmentFramework::CreateDependencyTable () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateDependencyTable@SegmentFramework@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+8], 0
  0003a	66 0f d6 45 e4	 movq	 QWORD PTR _info$[ebp], xmm0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _info$[ebp], 0
  00046	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+4], 0
  0004d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+8], 0
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GHAAJBKB@steamclient?4dll@
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 10   :        std::vector <DWORD> info;                                                                                                                                 //

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4

; 6    : 
; 7    :    if (!hModule) {

  00066	85 c0		 test	 eax, eax
  00068	75 0b		 jne	 SHORT $LN17@CreateDepe

; 8    :        hModule = LoadLibraryA (module);

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GHAAJBKB@steamclient?4dll@
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
$LN17@CreateDepe:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 17   :        info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule("steamclient.dll") + Datacase::LIBRARY_RVA));                                                //

  00075	05 00 a4 a9 00	 add	 eax, 11117568		; 00a9a400H
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0007a	8d 4d e4	 lea	 ecx, DWORD PTR _info$[ebp]
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 17   :        info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule("steamclient.dll") + Datacase::LIBRARY_RVA));                                                //

  0007d	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00080	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  00083	50		 push	 eax
  00084	6a 00		 push	 0
  00086	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 24   :        for (const auto& library : m_libraries) info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule(library)));                                          //

  0008b	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0008e	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00091	3b fb		 cmp	 edi, ebx
  00093	74 4b		 je	 SHORT $LN3@CreateDepe
  00095	8b 75 e8	 mov	 esi, DWORD PTR _info$[ebp+4]
$LL4@CreateDepe:
  00098	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  0009a	50		 push	 eax
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 24   :        for (const auto& library : m_libraries) info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule(library)));                                          //

  0009b	89 45 e0	 mov	 DWORD PTR _module$1$[ebp], eax
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4

; 6    : 
; 7    :    if (!hModule) {

  000a4	85 c0		 test	 eax, eax
  000a6	75 09		 jne	 SHORT $LN25@CreateDepe

; 8    :        hModule = LoadLibraryA (module);

  000a8	ff 75 e0	 push	 DWORD PTR _module$1$[ebp]
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
$LN25@CreateDepe:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 24   :        for (const auto& library : m_libraries) info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule(library)));                                          //

  000b1	89 45 e0	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 704  :         if (_Mylast != _My_data._Myend) {

  000b4	3b 75 ec	 cmp	 esi, DWORD PTR _info$[ebp+8]
  000b7	74 0a		 je	 SHORT $LN28@CreateDepe

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  000b9	89 06		 mov	 DWORD PTR [esi], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;
; 690  :         ++_Mylast;

  000bb	83 c6 04	 add	 esi, 4
  000be	89 75 e8	 mov	 DWORD PTR _info$[ebp+4], esi

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000c1	eb 10		 jmp	 SHORT $LN2@CreateDepe
$LN28@CreateDepe:

; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000c3	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  000c6	50		 push	 eax
  000c7	56		 push	 esi
  000c8	8d 4d e4	 lea	 ecx, DWORD PTR _info$[ebp]
  000cb	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>
  000d0	8b 75 e8	 mov	 esi, DWORD PTR _info$[ebp+4]
$LN2@CreateDepe:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 24   :        for (const auto& library : m_libraries) info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule(library)));                                          //

  000d3	83 c7 04	 add	 edi, 4
  000d6	3b fb		 cmp	 edi, ebx
  000d8	75 be		 jne	 SHORT $LL4@CreateDepe
  000da	8b 75 dc	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  000dd	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
$LN3@CreateDepe:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  000e0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000e3	2b d8		 sub	 ebx, eax
  000e5	c1 fb 02	 sar	 ebx, 2
  000e8	85 db		 test	 ebx, ebx
  000ea	0f 84 d4 00 00
	00		 je	 $LN113@CreateDepe
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 33   :        Utils::FindOffsetsToVec (m_libraries.at(0), m_signatures, info, true);                                                                                    //

  000f0	8b 00		 mov	 eax, DWORD PTR [eax]
  000f2	6a 01		 push	 1
  000f4	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000f7	89 45 d8	 mov	 DWORD PTR tv763[ebp], eax
  000fa	8b dc		 mov	 ebx, esp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000fc	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00102	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00109	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 524  :         const pointer _Rightfirst = _Right_data._Myfirst;

  00110	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]

; 525  :         const pointer _Rightlast  = _Right_data._Mylast;

  00113	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00116	89 4d e0	 mov	 DWORD PTR __Rightfirst$1$[ebp], ecx

; 526  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 527  :         if (_Rightfirst != _Rightlast) {

  00119	3b c8		 cmp	 ecx, eax
  0011b	74 29		 je	 SHORT $LN54@CreateDepe

; 528  :             _Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));

  0011d	2b c1		 sub	 eax, ecx
  0011f	8b cb		 mov	 ecx, ebx
  00121	8b f8		 mov	 edi, eax
  00123	89 45 dc	 mov	 DWORD PTR __Rightlast$1$[ebp], eax
  00126	c1 ff 02	 sar	 edi, 2
  00129	57		 push	 edi
  0012a	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy_raw
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0012f	ff 75 dc	 push	 DWORD PTR __Rightlast$1$[ebp]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1588 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  00132	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00134	ff 75 e0	 push	 DWORD PTR __Rightfirst$1$[ebp]
  00137	56		 push	 esi
  00138	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1528 :         _Dest += _ULast - _UFirst;

  0013d	8d 04 be	 lea	 eax, DWORD PTR [esi+edi*4]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00140	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 530  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  00143	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN54@CreateDepe:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 33   :        Utils::FindOffsetsToVec (m_libraries.at(0), m_signatures, info, true);                                                                                    //

  00146	8b 4d d8	 mov	 ecx, DWORD PTR tv763[ebp]
  00149	8d 55 e4	 lea	 edx, DWORD PTR _info$[ebp]
  0014c	e8 00 00 00 00	 call	 ?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z ; Utils::FindOffsetsToVec
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00151	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 33   :        Utils::FindOffsetsToVec (m_libraries.at(0), m_signatures, info, true);                                                                                    //

  00156	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00159	85 c0		 test	 eax, eax
  0015b	74 6c		 je	 SHORT $LN114@CreateDepe
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 45   :         std::memmove (reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer () + 0x20), reinterpret_cast<PVOID> (info.data()), Datacase::TABLE_SIZE);      //

  0015d	8b 75 e4	 mov	 esi, DWORD PTR _info$[ebp]
  00160	83 c0 20	 add	 eax, 32			; 00000020H
  00163	68 8c 01 00 00	 push	 396			; 0000018cH
  00168	56		 push	 esi
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 _memmove
  0016f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00172	85 f6		 test	 esi, esi
  00174	74 32		 je	 SHORT $LN85@CreateDepe

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00176	8b 4d ec	 mov	 ecx, DWORD PTR _info$[ebp+8]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00179	8b c6		 mov	 eax, esi
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0017b	2b ce		 sub	 ecx, esi
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0017d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00180	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00186	72 16		 jb	 SHORT $LN101@CreateDepe

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00188	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  0018b	83 c1 23	 add	 ecx, 35			; 00000023H
  0018e	2b c6		 sub	 eax, esi

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00190	83 c0 fc	 add	 eax, -4			; fffffffcH
  00193	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00196	76 06		 jbe	 SHORT $LN101@CreateDepe
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN101@CreateDepe:

; 195  :     ::operator delete(_Ptr, _Bytes);

  0019e	51		 push	 ecx
  0019f	56		 push	 esi
  001a0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001a5	83 c4 08	 add	 esp, 8
$LN85@CreateDepe:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 49   : }

  001a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b2	59		 pop	 ecx
  001b3	5f		 pop	 edi
  001b4	5e		 pop	 esi
  001b5	5b		 pop	 ebx
  001b6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b9	33 cd		 xor	 ecx, ebp
  001bb	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001c0	8b e5		 mov	 esp, ebp
  001c2	5d		 pop	 ebp
  001c3	c3		 ret	 0
$LN113@CreateDepe:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1520 :             _Xrange();

  001c4	e8 00 00 00 00	 call	 ?_Xrange@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xrange
$LN114@CreateDepe:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  001c9	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  001ce	b9 01 00 00 00	 mov	 ecx, 1
  001d3	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN111@CreateDepe:
  001d8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateDependencyTable@SegmentFramework@@QAEXXZ$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _info$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?CreateDependencyTable@SegmentFramework@@QAEXXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateDependencyTable@SegmentFramework@@QAEXXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateDependencyTable@SegmentFramework@@QAEXXZ ENDP	; SegmentFramework::CreateDependencyTable
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??$emplace_back@K@?$vector@KV?$allocator@K@std@@@std@@QAEAAK$$QAK@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@K@?$vector@KV?$allocator@K@std@@@std@@QAEAAK$$QAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::emplace_back<unsigned long>, COMDAT
; _this$ = ecx

; 700  :     decltype(auto) emplace_back(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 701  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 702  :         auto& _My_data   = _Mypair._Myval2;
; 703  :         pointer& _Mylast = _My_data._Mylast;
; 704  :         if (_Mylast != _My_data._Myend) {

  00005	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00008	3b 4a 08	 cmp	 ecx, DWORD PTR [edx+8]
  0000b	74 14		 je	 SHORT $LN2@emplace_ba

; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	89 01		 mov	 DWORD PTR [ecx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;

  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 690  :         ++_Mylast;

  00017	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@emplace_ba:

; 705  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 706  :         }
; 707  : 
; 708  :         _Ty& _Result = *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  00024	51		 push	 ecx
  00025	8b ca		 mov	 ecx, edx
  00027	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>

; 709  : #if _HAS_CXX17
; 710  :         return _Result;
; 711  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 712  :         (void) _Result;
; 713  : #endif // _HAS_CXX17
; 714  :     }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??$emplace_back@K@?$vector@KV?$allocator@K@std@@@std@@QAEAAK$$QAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::emplace_back<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@K@?$vector@KV?$allocator@K@std@@@std@@AAEAAK$$QAK@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@K@?$vector@KV?$allocator@K@std@@@std@@AAEAAK$$QAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long>, COMDAT
; _this$ = ecx

; 682  :     decltype(auto) _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 683  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 684  :         auto& _My_data   = _Mypair._Myval2;
; 685  :         pointer& _Mylast = _My_data._Mylast;
; 686  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 687  :         _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 02		 mov	 DWORD PTR [edx], eax

; 688  :         _Orphan_range(_Mylast, _Mylast);
; 689  :         _Ty& _Result = *_Mylast;

  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 690  :         ++_Mylast;

  00010	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  00013	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 691  : #if _HAS_CXX17
; 692  :         return _Result;
; 693  : #else // ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv
; 694  :         (void) _Result;
; 695  : #endif // _HAS_CXX17
; 696  :     }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@K@?$vector@KV?$allocator@K@std@@@std@@AAEAAK$$QAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0000e	c2 04 00	 ret	 4
?__autoclassinit2@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
;	COMDAT ?UpdateNetVars@SegmentFramework@@QAEXXZ
_TEXT	SEGMENT
?UpdateNetVars@SegmentFramework@@QAEXXZ PROC		; SegmentFramework::UpdateNetVars, COMDAT
; _this$ = ecx

; 52   : 
; 53   :     //Netvars are offsets to parent variables in valve sdk.
; 54   :     for (const auto& netvar : m_netvars) {

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	57		 push	 edi
  00003	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00006	3b c7		 cmp	 eax, edi
  00008	74 20		 je	 SHORT $LN3@UpdateNetV
  0000a	56		 push	 esi
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@UpdateNetV:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00010	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00016	85 f6		 test	 esi, esi
  00018	74 12		 je	 SHORT $LN14@UpdateNetV
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 55   :         *reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer () + netvar.rva) = netvar.new_value;

  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001f	83 c0 08	 add	 eax, 8
  00022	89 0c 16	 mov	 DWORD PTR [esi+edx], ecx
  00025	3b c7		 cmp	 eax, edi
  00027	75 e7		 jne	 SHORT $LL4@UpdateNetV
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00029	5e		 pop	 esi
$LN3@UpdateNetV:
  0002a	5f		 pop	 edi
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 58   : }

  0002b	c3		 ret	 0
$LN14@UpdateNetV:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  0002c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN18@UpdateNetV:
  0003b	cc		 int	 3
?UpdateNetVars@SegmentFramework@@QAEXXZ ENDP		; SegmentFramework::UpdateNetVars
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\libs\libs\HookLib\HookLib\HookLib\HookLib.c
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\libs\libs\HookLib\HookLib\HookLib\HookLib.c
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
;	COMDAT ?CreateHook@SegmentFramework@@QAEXXZ
_TEXT	SEGMENT
?CreateHook@SegmentFramework@@QAEXXZ PROC		; SegmentFramework::CreateHook, COMDAT
; _this$dead$ = ecx
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00006	85 c9		 test	 ecx, ecx
  00008	75 0f		 jne	 SHORT $LN6@CreateHook

; 14   :         PanicUtils::Release (layer, reason);

  0000a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0000f	b9 01 00 00 00	 mov	 ecx, 1
  00014	e9 00 00 00 00	 jmp	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN6@CreateHook:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\libs\libs\HookLib\HookLib\HookLib\HookLib.c

; 851  :     return SetHookUm(Target, Interceptor, Original);

  00019	51		 push	 ecx
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 77   :       SetHook (reinterpret_cast<PVOID> (Segment::GetSafeAllocationPointer() + Datacase::VIRTUAL_EXECUTOR_RVA), &CustomVirtualCaller, reinterpret_cast<PVOID*> (&OriginalVirtualCaller)); //

  0001a	81 c1 30 3b 00
	00		 add	 ecx, 15152		; 00003b30H
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\libs\libs\HookLib\HookLib\HookLib\HookLib.c

; 851  :     return SetHookUm(Target, Interceptor, Original);

  00020	e8 00 00 00 00	 call	 _SetHookUm
  00025	59		 pop	 ecx
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 80   : }

  00026	c3		 ret	 0
?CreateHook@SegmentFramework@@QAEXXZ ENDP		; SegmentFramework::CreateHook
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
;	COMDAT ?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z
_TEXT	SEGMENT
?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z PROC	; SegmentFramework::CustomVirtualCaller, COMDAT
; _vTable$ = ecx
; _index$ = edx

; 82   : UINT SegmentFramework::CustomVirtualCaller (PVOID vTable, INT index) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 83   : 
; 84   :     //Last index update you can found on UC. (https://www.unknowncheats.me/forum/counterstrike-global-offensive/310246-updates-megathread.html)
; 85   : 
; 86   :     if (index >= 152) {

  00003	81 fa 98 00 00
	00		 cmp	 edx, 152		; 00000098H
  00009	7c 26		 jl	 SHORT $LN5@CustomVirt

; 87   : 
; 88   :         index += 2;
; 89   : 
; 90   :         if (index >= 256) index++;
; 91   :         if (index >= 300) index += 2;

  0000b	33 c9		 xor	 ecx, ecx
  0000d	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00010	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00015	0f 9d c1	 setge	 cl
  00018	83 c1 02	 add	 ecx, 2
  0001b	03 d1		 add	 edx, ecx
  0001d	81 fa 2c 01 00
	00		 cmp	 edx, 300		; 0000012cH
  00023	7c 0c		 jl	 SHORT $LN5@CustomVirt
  00025	83 c2 02	 add	 edx, 2

; 92   :         if (index >= 300) index++;

  00028	81 fa 2c 01 00
	00		 cmp	 edx, 300		; 0000012cH
  0002e	7c 01		 jl	 SHORT $LN5@CustomVirt
  00030	42		 inc	 edx
$LN5@CustomVirt:

; 93   : 
; 94   :     }
; 95   : 
; 96   :     return SegmentFramework::OriginalVirtualCaller(vTable, index);

  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?OriginalVirtualCaller@SegmentFramework@@2P6IIPAXH@ZA ; SegmentFramework::OriginalVirtualCaller
  00036	8b ce		 mov	 ecx, esi
  00038	5e		 pop	 esi
  00039	ff e0		 jmp	 eax
?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z ENDP	; SegmentFramework::CustomVirtualCaller
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\headers\segment\Segment.h
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
;	COMDAT ?UpdateWatermark@SegmentFramework@@QAEXPBD0@Z
_TEXT	SEGMENT
_watermark$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_mark$ = 8						; size = 4
_player$dead$ = 12					; size = 4
?UpdateWatermark@SegmentFramework@@QAEXPBD0@Z PROC	; SegmentFramework::UpdateWatermark, COMDAT
; _this$dead$ = ecx

; 102  : void SegmentFramework::UpdateWatermark (const char* mark, const char* player) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _mark$[ebp]

; 114  :        std::strncpy (watermark, mark, 16);                                                                                                                       //

  00013	6a 10		 push	 16			; 00000010H
  00015	50		 push	 eax
  00016	8d 45 ec	 lea	 eax, DWORD PTR _watermark$[ebp]
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00020	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 114  :        std::strncpy (watermark, mark, 16);                                                                                                                       //

  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00029	85 d2		 test	 edx, edx
  0002b	74 4d		 je	 SHORT $LN25@UpdateWate
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\headers\segment\Segment.h

; 25   : 		return UnsafeAllocatedPointer;

  0002d	56		 push	 esi
  0002e	8d 4d ec	 lea	 ecx, DWORD PTR _watermark$[ebp]
  00031	81 c2 81 d3 12
	00		 add	 edx, 1233793		; 0012d381H
  00037	be 04 00 00 00	 mov	 esi, 4
  0003c	0f 1f 40 00	 npad	 4
$LL13@UpdateWate:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp

; 126  :         std::memcpy (reinterpret_cast <DWORD*> (base + offsetToInstructions + instructionsIterator), compressedArray + segmentedCharIterator, instructionCharMoveCount);

  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 127  :         segmentedCharIterator += arrayCharCycleUpdate;

  00042	8d 49 04	 lea	 ecx, DWORD PTR [ecx+4]
  00045	89 02		 mov	 DWORD PTR [edx], eax
  00047	8d 52 07	 lea	 edx, DWORD PTR [edx+7]
  0004a	83 ee 01	 sub	 esi, 1
  0004d	75 f1		 jne	 SHORT $LL13@UpdateWate
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  0004f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00054	5e		 pop	 esi
  00055	85 c0		 test	 eax, eax
  00057	74 21		 je	 SHORT $LN25@UpdateWate
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 128  :        std::memmove (reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer() + 0x1), player, 0x20);                                                        //

  00059	6a 20		 push	 32			; 00000020H
  0005b	40		 inc	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_06CPAKJCCD@Neonik@
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 _memmove

; 132  : }

  00067	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	33 cd		 xor	 ecx, ebp
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 08 00	 ret	 8
$LN25@UpdateWate:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  0007a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN26@UpdateWate:
  00089	cc		 int	 3
?UpdateWatermark@SegmentFramework@@QAEXPBD0@Z ENDP	; SegmentFramework::UpdateWatermark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\headers\segment\Segment.h
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
;	COMDAT ?UpdateMenuWatermark@SegmentFramework@@QAEXPBD@Z
_TEXT	SEGMENT
_watermark$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_value$dead$ = 8					; size = 4
?UpdateMenuWatermark@SegmentFramework@@QAEXPBD@Z PROC	; SegmentFramework::UpdateMenuWatermark, COMDAT
; _this$dead$ = ecx

; 134  : void SegmentFramework::UpdateMenuWatermark (const char* value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 146  :        std::strncpy (watermark, value, 12);                                                                                                                      //

  00010	6a 0c		 push	 12			; 0000000cH
  00012	8d 45 f0	 lea	 eax, DWORD PTR _watermark$[ebp]
  00015	68 00 00 00 00	 push	 OFFSET ??_C@_09MLFFDPN@Neonik?4tk@
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00021	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 146  :        std::strncpy (watermark, value, 12);                                                                                                                      //

  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  0002a	85 d2		 test	 edx, edx
  0002c	74 32		 je	 SHORT $LN21@UpdateMenu
  0002e	56		 push	 esi
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\headers\segment\Segment.h

; 25   : 		return UnsafeAllocatedPointer;

  0002f	8d 4d f0	 lea	 ecx, DWORD PTR _watermark$[ebp]
  00032	81 c2 5f 02 0e
	00		 add	 edx, 918111		; 000e025fH
  00038	be 03 00 00 00	 mov	 esi, 3
  0003d	0f 1f 00	 npad	 3
$LL13@UpdateMenu:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\Utils.cpp

; 126  :         std::memcpy (reinterpret_cast <DWORD*> (base + offsetToInstructions + instructionsIterator), compressedArray + segmentedCharIterator, instructionCharMoveCount);

  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 127  :         segmentedCharIterator += arrayCharCycleUpdate;

  00042	8d 49 04	 lea	 ecx, DWORD PTR [ecx+4]
  00045	89 02		 mov	 DWORD PTR [edx], eax
  00047	8d 52 07	 lea	 edx, DWORD PTR [edx+7]
  0004a	83 ee 01	 sub	 esi, 1
  0004d	75 f1		 jne	 SHORT $LL13@UpdateMenu
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 155  : }

  0004f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00052	33 cd		 xor	 ecx, ebp
  00054	5e		 pop	 esi
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
$LN21@UpdateMenu:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  00060	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  00065	b9 01 00 00 00	 mov	 ecx, 1
  0006a	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN19@UpdateMenu:
  0006f	cc		 int	 3
?UpdateMenuWatermark@SegmentFramework@@QAEXPBD@Z ENDP	; SegmentFramework::UpdateMenuWatermark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp
;	COMDAT ?SetMenuStatus@SegmentFramework@@QAEX_N@Z
_TEXT	SEGMENT
_status$dead$ = 8					; size = 1
?SetMenuStatus@SegmentFramework@@QAEX_N@Z PROC		; SegmentFramework::SetMenuStatus, COMDAT
; _this$dead$ = ecx
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 13   :     if (!value) {

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00005	85 c0		 test	 eax, eax
  00007	74 0d		 je	 SHORT $LN12@SetMenuSta
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\frameworks\SegmentFramework.cpp

; 160  : }

  00009	c7 80 67 5f 48
	00 00 00 00 00	 mov	 DWORD PTR [eax+4743015], 0
  00013	c2 04 00	 ret	 4
$LN12@SetMenuSta:
; File C:\Users\Neonik\Desktop\CSGO Cheat Sources\OTC-Source\otc\cpp\utils\PanicUtils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  00016	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0001b	b9 01 00 00 00	 mov	 ecx, 1
  00020	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN10@SetMenuSta:
  00025	cc		 int	 3
?SetMenuStatus@SegmentFramework@@QAEX_N@Z ENDP		; SegmentFramework::SetMenuStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?at@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEAAPBDI@Z
_TEXT	SEGMENT
__Pos$dead$ = 8						; size = 4
?at@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEAAPBDI@Z PROC ; std::vector<char const *,std::allocator<char const *> >::at, COMDAT
; _this$ = ecx

; 1518 :         auto& _My_data = _Mypair._Myval2;
; 1519 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	2b c2		 sub	 eax, edx
  00007	c1 f8 02	 sar	 eax, 2
  0000a	85 c0		 test	 eax, eax
  0000c	74 05		 je	 SHORT $LN6@at

; 1521 :         }
; 1522 : 
; 1523 :         return _My_data._Myfirst[_Pos];

  0000e	8b c2		 mov	 eax, edx

; 1524 :     }

  00010	c2 04 00	 ret	 4
$LN6@at:

; 1520 :             _Xrange();

  00013	e8 00 00 00 00	 call	 ?_Xrange@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xrange
$LN4@at:
  00018	cc		 int	 3
?at@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEAAPBDI@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::at
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ
_TEXT	SEGMENT
?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1470 :         return _Mypair._Myval2._Mylast;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1471 :     }

  00003	c3		 ret	 0
?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ
_TEXT	SEGMENT
?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1462 :         return _Mypair._Myval2._Myfirst;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1463 :     }

  00002	c3		 ret	 0
?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ PROC	; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 195  :     ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1697 :             _Myfirst = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 195  :     ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1698 :             _Mylast  = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 678  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN25@vector:
  00051	cc		 int	 3
??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ENDP	; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Rightfirst$1$ = -8					; size = 4
__Rightlast$1$ = -4					; size = 4
__Right$ = 8						; size = 4
??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >, COMDAT
; _this$ = ecx

; 519  :     vector(const vector& _Right)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000c	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00012	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00019	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 520  :         : _Mypair(_One_then_variadic_args_t(), _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {
; 521  :         auto&& _Alproxy           = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 522  :         auto& _My_data            = _Mypair._Myval2;
; 523  :         const auto& _Right_data   = _Right._Mypair._Myval2;
; 524  :         const pointer _Rightfirst = _Right_data._Myfirst;

  00020	8b 08		 mov	 ecx, DWORD PTR [eax]

; 525  :         const pointer _Rightlast  = _Right_data._Mylast;

  00022	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00025	89 4d f8	 mov	 DWORD PTR __Rightfirst$1$[ebp], ecx

; 526  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 527  :         if (_Rightfirst != _Rightlast) {

  00028	3b c8		 cmp	 ecx, eax
  0002a	74 2d		 je	 SHORT $LN41@vector

; 528  :             _Buy_raw(static_cast<size_type>(_Rightlast - _Rightfirst));

  0002c	56		 push	 esi
  0002d	2b c1		 sub	 eax, ecx
  0002f	8b cb		 mov	 ecx, ebx
  00031	57		 push	 edi
  00032	8b f8		 mov	 edi, eax
  00034	89 45 fc	 mov	 DWORD PTR __Rightlast$1$[ebp], eax
  00037	c1 ff 02	 sar	 edi, 2
  0003a	57		 push	 edi
  0003b	e8 00 00 00 00	 call	 ?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy_raw
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00040	ff 75 fc	 push	 DWORD PTR __Rightlast$1$[ebp]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1588 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  00043	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00045	ff 75 f8	 push	 DWORD PTR __Rightfirst$1$[ebp]
  00048	56		 push	 esi
  00049	e8 00 00 00 00	 call	 _memmove
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1528 :         _Dest += _ULast - _UFirst;

  00051	8d 0c be	 lea	 ecx, DWORD PTR [esi+edi*4]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 530  :             _My_data._Mylast = _Ucopy(_Rightfirst, _Rightlast, _My_data._Myfirst);

  00054	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 531  :             _Guard._Target   = nullptr;
; 532  :         }
; 533  : 
; 534  :         _Proxy._Release();
; 535  :     }

  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
$LN41@vector:
  00059	8b c3		 mov	 eax, ebx
  0005b	5b		 pop	 ebx
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Unchecked_end@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Unchecked_end@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1470 :         return _Mypair._Myval2._Mylast;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1471 :     }

  00003	c3		 ret	 0
?_Unchecked_end@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Unchecked_begin@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1462 :         return _Mypair._Myval2._Myfirst;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1463 :     }

  00002	c3		 ret	 0
?_Unchecked_begin@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Getal@?$vector@KV?$allocator@K@std@@@std@@AAEAAV?$allocator@K@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@KV?$allocator@K@std@@@std@@AAEAAV?$allocator@K@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Getal, COMDAT
; _this$ = ecx

; 1732 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1733 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@KV?$allocator@K@std@@@std@@AAEAAV?$allocator@K@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@ABEXPAK0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@ABEXPAK0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1712 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1713 :         _Lockit _Lock(_LOCK_DEBUG);
; 1714 : 
; 1715 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;
; 1716 :         while (*_Pnext) {
; 1717 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;
; 1718 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator
; 1719 :                 _Pnext = &(*_Pnext)->_Mynextiter;
; 1720 :             } else { // orphan the iterator
; 1721 :                 (*_Pnext)->_Myproxy = nullptr;
; 1722 :                 *_Pnext             = (*_Pnext)->_Mynextiter;
; 1723 :             }
; 1724 :         }
; 1725 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1726 :         (void) _First;
; 1727 :         (void) _Last;
; 1728 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1729 :     }

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@ABEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?data@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ
_TEXT	SEGMENT
?data@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::data, COMDAT
; _this$ = ecx

; 1402 :         return _Unfancy_maybe_null(_Mypair._Myval2._Myfirst);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1403 :     }

  00002	c3		 ret	 0
?data@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 672  :     ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 195  :     ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1697 :             _Myfirst = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 195  :     ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1698 :             _Mylast  = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 678  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN25@vector:
  00051	cc		 int	 3
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 445  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 446  :     }

  00006	8b c1		 mov	 eax, ecx

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 445  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));
; 446  :     }

  00016	c3		 ret	 0
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
;	COMDAT ??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >::~_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >, COMDAT
; _this$ = ecx

; 5692 :     ~_Tidy_guard() {

  00000	56		 push	 esi

; 5693 :         if (_Target) {

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	85 f6		 test	 esi, esi
  00005	74 46		 je	 SHORT $LN5@Tidy_guard
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	85 c0		 test	 eax, eax
  0000b	74 40		 je	 SHORT $LN5@Tidy_guard

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00010	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN21@Tidy_guard

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 22		 ja	 SHORT $LN18@Tidy_guard

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN21@Tidy_guard:

; 195  :     ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1697 :             _Myfirst = pointer();

  00036	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 195  :     ::operator delete(_Ptr, _Bytes);

  0003c	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1698 :             _Mylast  = pointer();

  0003f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00046	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN5@Tidy_guard:
  0004d	5e		 pop	 esi
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 5696 :     }

  0004e	c3		 ret	 0
$LN18@Tidy_guard:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN26@Tidy_guard:
  00055	cc		 int	 3
??1?$_Tidy_guard@V?$vector@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >::~_Tidy_guard<std::vector<char const *,std::allocator<char const *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@ABEABV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@ABEABV?$allocator@PBD@2@XZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Getal, COMDAT
; _this$ = ecx

; 1736 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1737 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@ABEABV?$allocator@PBD@2@XZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Xrange@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Xrange, COMDAT

; 1708 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN3@Xrange:
  0000b	cc		 int	 3
?_Xrange@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Tidy, COMDAT
; _this$ = ecx

; 1685 :     void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1686 :         auto& _My_data    = _Mypair._Myval2;
; 1687 :         pointer& _Myfirst = _My_data._Myfirst;
; 1688 :         pointer& _Mylast  = _My_data._Mylast;
; 1689 :         pointer& _Myend   = _My_data._Myend;
; 1690 : 
; 1691 :         _My_data._Orphan_all();
; 1692 : 
; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN2@Tidy

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN18@Tidy

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN15@Tidy

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN18@Tidy:

; 195  :     ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1697 :             _Myfirst = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 195  :     ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1698 :             _Mylast  = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 1701 :     }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN15@Tidy:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN22@Tidy:
  00051	cc		 int	 3
?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1632 :     void _Buy_raw(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 34   :             if (_Count > _Max_possible) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1632 :     void _Buy_raw(const size_type _Newcapacity) {

  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 34   :             if (_Count > _Max_possible) {

  0000a	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00010	77 6f		 ja	 SHORT $LN30@Buy_raw

; 35   :                 _Throw_bad_array_new_length(); // multiply overflow
; 36   :             }
; 37   :         }
; 38   : 
; 39   :     return _Count * _Ty_size;

  00012	c1 e6 02	 shl	 esi, 2

; 174  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00015	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0001b	72 35		 jb	 SHORT $LN10@Buy_raw

; 89   :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001d	8d 46 23	 lea	 eax, DWORD PTR [esi+35]

; 90   :     if (_Block_size <= _Bytes) {

  00020	3b c6		 cmp	 eax, esi
  00022	76 5d		 jbe	 SHORT $LN30@Buy_raw

; 51   :         return ::operator new(_Bytes);

  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 94   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0002a	8b c8		 mov	 ecx, eax

; 51   :         return ::operator new(_Bytes);

  0002c	83 c4 04	 add	 esp, 4

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002f	85 c9		 test	 ecx, ecx
  00031	74 19		 je	 SHORT $LN19@Buy_raw

; 96   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00033	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00036	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 97   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00039	89 48 fc	 mov	 DWORD PTR [eax-4], ecx
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1643 :         _Myfirst           = _Newvec;

  0003c	89 07		 mov	 DWORD PTR [edi], eax

; 1644 :         _Mylast            = _Newvec;

  0003e	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1645 :         _Myend             = _Newvec + _Newcapacity;

  00041	03 c6		 add	 eax, esi
  00043	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi

; 1646 :     }

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN19@Buy_raw:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN10@Buy_raw:

; 179  :     if (_Bytes != 0) {

  00052	85 f6		 test	 esi, esi
  00054	74 19		 je	 SHORT $LN11@Buy_raw

; 51   :         return ::operator new(_Bytes);

  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1643 :         _Myfirst           = _Newvec;

  0005c	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 51   :         return ::operator new(_Bytes);

  0005e	83 c4 04	 add	 esp, 4
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1644 :         _Mylast            = _Newvec;

  00061	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1645 :         _Myend             = _Newvec + _Newcapacity;

  00064	03 c6		 add	 eax, esi
  00066	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi

; 1646 :     }

  0006b	5d		 pop	 ebp
  0006c	c2 04 00	 ret	 4
$LN11@Buy_raw:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 183  :     return nullptr;

  0006f	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1643 :         _Myfirst           = _Newvec;

  00071	89 07		 mov	 DWORD PTR [edi], eax

; 1644 :         _Mylast            = _Newvec;

  00073	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1645 :         _Myend             = _Newvec + _Newcapacity;

  00076	8b c6		 mov	 eax, esi
  00078	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi

; 1646 :     }

  0007d	5d		 pop	 ebp
  0007e	c2 04 00	 ret	 4
$LN30@Buy_raw:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 91   :         _Throw_bad_array_new_length(); // add overflow

  00081	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN31@Buy_raw:
  00086	cc		 int	 3
?_Buy_raw@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXI@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SA?AV?$allocator@PBD@2@ABV32@@Z
_TEXT	SEGMENT
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SA?AV?$allocator@PBD@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char const *> >::select_on_container_copy_construction, COMDAT
; ___$ReturnUdt$ = ecx
; __Al$dead$ = edx

; 684  :         return _Al;

  00000	8b c1		 mov	 eax, ecx

; 685  :     }

  00002	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SA?AV?$allocator@PBD@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char const *> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$allocator@K@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$allocator@K@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1336 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1337 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$allocator@K@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Getal@?$vector@KV?$allocator@K@std@@@std@@ABEABV?$allocator@K@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@KV?$allocator@K@std@@@std@@ABEABV?$allocator@K@2@XZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Getal, COMDAT
; _this$ = ecx

; 1736 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1737 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@KV?$allocator@K@std@@@std@@ABEABV?$allocator@K@2@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@AAEXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1685 :     void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1686 :         auto& _My_data    = _Mypair._Myval2;
; 1687 :         pointer& _Myfirst = _My_data._Myfirst;
; 1688 :         pointer& _Mylast  = _My_data._Mylast;
; 1689 :         pointer& _Myend   = _My_data._Myend;
; 1690 : 
; 1691 :         _My_data._Orphan_all();
; 1692 : 
; 1693 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN2@Tidy

; 1694 :             _Destroy(_Myfirst, _Mylast);
; 1695 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN18@Tidy

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN15@Tidy

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN18@Tidy:

; 195  :     ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1697 :             _Myfirst = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 195  :     ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1698 :             _Mylast  = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1699 :             _Myend   = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 1701 :     }

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN15@Tidy:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN22@Tidy:
  00051	cc		 int	 3
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@AAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1340 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1341 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Getal, COMDAT
; _this$ = ecx

; 1732 :         return _Mypair._Get_first();

  00000	8b c1		 mov	 eax, ecx

; 1733 :     }

  00002	c3		 ret	 0
?_Getal@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEAAV?$allocator@PBD@2@XZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1612 :         _Destroy_range(_First, _Last, _Getal());
; 1613 :     }

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z PROC		; std::allocator<char const *>::allocate, COMDAT
; _this$dead$ = ecx

; 783  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   :             if (_Count > _Max_possible) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000b	77 4a		 ja	 SHORT $LN27@allocate

; 35   :                 _Throw_bad_array_new_length(); // multiply overflow
; 36   :             }
; 37   :         }
; 38   : 
; 39   :     return _Count * _Ty_size;

  0000d	c1 e0 02	 shl	 eax, 2

; 174  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00015	72 29		 jb	 SHORT $LN8@allocate

; 89   :     const size_t _Block_size = _Non_user_size + _Bytes;

  00017	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 90   :     if (_Block_size <= _Bytes) {

  0001a	3b c8		 cmp	 ecx, eax
  0001c	76 39		 jbe	 SHORT $LN27@allocate

; 51   :         return ::operator new(_Bytes);

  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 94   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00024	8b c8		 mov	 ecx, eax

; 51   :         return ::operator new(_Bytes);

  00026	83 c4 04	 add	 esp, 4

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00029	85 c9		 test	 ecx, ecx
  0002b	74 0d		 je	 SHORT $LN17@allocate

; 96   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0002d	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00030	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 97   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00033	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 785  :     }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN17@allocate:

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN8@allocate:

; 179  :     if (_Bytes != 0) {

  00040	85 c0		 test	 eax, eax
  00042	74 0d		 je	 SHORT $LN9@allocate

; 51   :         return ::operator new(_Bytes);

  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004a	83 c4 04	 add	 esp, 4

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 785  :     }

  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
$LN9@allocate:

; 183  :     return nullptr;

  00051	33 c0		 xor	 eax, eax

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 785  :     }

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN27@allocate:

; 91   :         _Throw_bad_array_new_length(); // add overflow

  00057	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN28@allocate:
  0005c	cc		 int	 3
?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z ENDP		; std::allocator<char const *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z PROC	; std::allocator<char const *>::deallocate, COMDAT
; _this$dead$ = ecx

; 778  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 779  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00016	72 14		 jb	 SHORT $LN15@deallocate

; 108  :     _Bytes += _Non_user_size;

  00018	56		 push	 esi

; 109  : 
; 110  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);
; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b ce		 sub	 ecx, esi

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 11		 ja	 SHORT $LN12@deallocate

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
$LN15@deallocate:

; 195  :     ::operator delete(_Ptr, _Bytes);

  0002c	52		 push	 edx
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8

; 781  :     }

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
$LN12@deallocate:

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00040	cc		 int	 3
?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z ENDP	; std::allocator<char const *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$allocator@K@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$allocator@K@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1340 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1341 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$allocator@K@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Destroy@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1612 :         _Destroy_range(_First, _Last, _Getal());
; 1613 :     }

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?allocate@?$allocator@K@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@K@std@@QAEPAKI@Z PROC		; std::allocator<unsigned long>::allocate, COMDAT
; _this$dead$ = ecx

; 783  :     _NODISCARD _DECLSPEC_ALLOCATOR _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 34   :             if (_Count > _Max_possible) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0000b	77 4a		 ja	 SHORT $LN27@allocate

; 35   :                 _Throw_bad_array_new_length(); // multiply overflow
; 36   :             }
; 37   :         }
; 38   : 
; 39   :     return _Count * _Ty_size;

  0000d	c1 e0 02	 shl	 eax, 2

; 174  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00015	72 29		 jb	 SHORT $LN8@allocate

; 89   :     const size_t _Block_size = _Non_user_size + _Bytes;

  00017	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 90   :     if (_Block_size <= _Bytes) {

  0001a	3b c8		 cmp	 ecx, eax
  0001c	76 39		 jbe	 SHORT $LN27@allocate

; 51   :         return ::operator new(_Bytes);

  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 94   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00024	8b c8		 mov	 ecx, eax

; 51   :         return ::operator new(_Bytes);

  00026	83 c4 04	 add	 esp, 4

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00029	85 c9		 test	 ecx, ecx
  0002b	74 0d		 je	 SHORT $LN17@allocate

; 96   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0002d	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00030	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 97   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00033	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 785  :     }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
$LN17@allocate:

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN8@allocate:

; 179  :     if (_Bytes != 0) {

  00040	85 c0		 test	 eax, eax
  00042	74 0d		 je	 SHORT $LN9@allocate

; 51   :         return ::operator new(_Bytes);

  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004a	83 c4 04	 add	 esp, 4

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 785  :     }

  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
$LN9@allocate:

; 183  :     return nullptr;

  00051	33 c0		 xor	 eax, eax

; 784  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
; 785  :     }

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN27@allocate:

; 91   :         _Throw_bad_array_new_length(); // add overflow

  00057	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN28@allocate:
  0005c	cc		 int	 3
?allocate@?$allocator@K@std@@QAEPAKI@Z ENDP		; std::allocator<unsigned long>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXQAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXQAKI@Z PROC		; std::allocator<unsigned long>::deallocate, COMDAT
; _this$dead$ = ecx

; 778  :     void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 779  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00016	72 14		 jb	 SHORT $LN15@deallocate

; 108  :     _Bytes += _Non_user_size;

  00018	56		 push	 esi

; 109  : 
; 110  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);
; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b ce		 sub	 ecx, esi

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 11		 ja	 SHORT $LN12@deallocate

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
$LN15@deallocate:

; 195  :     ::operator delete(_Ptr, _Bytes);

  0002c	52		 push	 edx
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8

; 781  :     }

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
$LN12@deallocate:

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00040	cc		 int	 3
?deallocate@?$allocator@K@std@@QAEXQAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1336 :         return *this;

  00000	8b c1		 mov	 eax, ecx

; 1337 :     }

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 30   :     return _Right < _Left ? _Right : _Left;

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00004	0f 42 ca	 cmovb	 ecx, edx
  00007	8b c1		 mov	 eax, ecx

; 31   : }

  00009	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\type_traits
;	COMDAT ??$forward@K@std@@YA$$QAKAAK@Z
_TEXT	SEGMENT
??$forward@K@std@@YA$$QAKAAK@Z PROC			; std::forward<unsigned long>, COMDAT
; __Arg$ = ecx

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1456 : }

  00002	c3		 ret	 0
??$forward@K@std@@YA$$QAKAAK@Z ENDP			; std::forward<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xstddef
;	COMDAT ??$_Unfancy@K@std@@YAPAKPAK@Z
_TEXT	SEGMENT
??$_Unfancy@K@std@@YAPAKPAK@Z PROC			; std::_Unfancy<unsigned long>, COMDAT
; __Ptr$ = ecx

; 289  :     return _Ptr;

  00000	8b c1		 mov	 eax, ecx

; 290  : }

  00002	c3		 ret	 0
??$_Unfancy@K@std@@YAPAKPAK@Z ENDP			; std::_Unfancy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$construct@KK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAK$$QAK@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@KK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAK$$QAK@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 670  :     static void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax

; 671  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);
; 672  :     }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@KK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAK$$QAK@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
__Whereptr$GSCopy$1$ = -8				; size = 4
tv618 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>, COMDAT
; _this$ = ecx

; 725  :     pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 45 f8	 mov	 DWORD PTR __Whereptr$GSCopy$1$[ebp], eax

; 726  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 727  :         _Alty& _Al        = _Getal();
; 728  :         auto& _My_data    = _Mypair._Myval2;
; 729  :         pointer& _Myfirst = _My_data._Myfirst;
; 730  :         pointer& _Mylast  = _My_data._Mylast;
; 731  : 
; 732  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 733  : 
; 734  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00011	8b 17		 mov	 edx, DWORD PTR [edi]
  00013	2b c2		 sub	 eax, edx
  00015	c1 f8 02	 sar	 eax, 2
  00018	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 735  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0001b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001e	2b c2		 sub	 eax, edx
  00020	c1 f8 02	 sar	 eax, 2

; 736  : 
; 737  :         if (_Oldsize == max_size()) {

  00023	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00028	0f 84 25 01 00
	00		 je	 $LN88@Emplace_re

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00031	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00034	2b ca		 sub	 ecx, edx

; 739  :         }
; 740  : 
; 741  :         const size_type _Newsize     = _Oldsize + 1;

  00036	89 5d f4	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00039	c1 f9 02	 sar	 ecx, 2

; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  0003c	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00041	8b d1		 mov	 edx, ecx
  00043	d1 ea		 shr	 edx, 1
  00045	2b c2		 sub	 eax, edx
  00047	3b c8		 cmp	 ecx, eax
  00049	76 04		 jbe	 SHORT $LN12@Emplace_re

; 1620 :             return _Newsize; // geometric growth would overflow

  0004b	8b c3		 mov	 eax, ebx
  0004d	eb 08		 jmp	 SHORT $LN13@Emplace_re
$LN12@Emplace_re:

; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  00052	3b c3		 cmp	 eax, ebx
  00054	0f 42 c3	 cmovb	 eax, ebx
$LN13@Emplace_re:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 34   :             if (_Count > _Max_possible) {

  00057	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0005c	0f 87 ec 00 00
	00		 ja	 $LN85@Emplace_re

; 35   :                 _Throw_bad_array_new_length(); // multiply overflow
; 36   :             }
; 37   :         }
; 38   : 
; 39   :     return _Count * _Ty_size;

  00062	8d 1c 85 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*4]

; 174  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00069	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0006f	72 27		 jb	 SHORT $LN24@Emplace_re

; 89   :     const size_t _Block_size = _Non_user_size + _Bytes;

  00071	8d 43 23	 lea	 eax, DWORD PTR [ebx+35]

; 90   :     if (_Block_size <= _Bytes) {

  00074	3b c3		 cmp	 eax, ebx
  00076	0f 86 d2 00 00
	00		 jbe	 $LN85@Emplace_re

; 51   :         return ::operator new(_Bytes);

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00082	83 c4 04	 add	 esp, 4

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00085	85 c0		 test	 eax, eax
  00087	0f 84 bb 00 00
	00		 je	 $LN78@Emplace_re

; 96   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0008d	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  00090	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 97   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00093	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 175  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00096	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 176  :     }
; 177  : #endif // defined(_M_IX86) || defined(_M_X64)
; 178  : 
; 179  :     if (_Bytes != 0) {

  00098	85 db		 test	 ebx, ebx
  0009a	74 0d		 je	 SHORT $LN25@Emplace_re

; 51   :         return ::operator new(_Bytes);

  0009c	53		 push	 ebx
  0009d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a2	83 c4 04	 add	 esp, 4

; 180  :         return _Traits::_Allocate(_Bytes);

  000a5	8b f0		 mov	 esi, eax
  000a7	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 181  :     }
; 182  : 
; 183  :     return nullptr;

  000a9	33 f6		 xor	 esi, esi
$LN23@Emplace_re:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 749  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ab	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 750  :         _Constructed_first = _Newvec + _Whereoff;
; 751  : 
; 752  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ae	8b 55 f8	 mov	 edx, DWORD PTR __Whereptr$GSCopy$1$[ebp]
  000b1	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]
  000b4	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000b7	89 4d fc	 mov	 DWORD PTR tv618[ebp], ecx
  000ba	8b 00		 mov	 eax, DWORD PTR [eax]
  000bc	89 01		 mov	 DWORD PTR [ecx], eax
  000be	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000c3	3b d0		 cmp	 edx, eax
  000c5	75 0f		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  000c7	2b c1		 sub	 eax, ecx

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000c9	50		 push	 eax
  000ca	51		 push	 ecx
  000cb	56		 push	 esi
  000cc	e8 00 00 00 00	 call	 _memmove
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 754  :         } else { // provide basic guarantee

  000d4	eb 23		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  000d6	2b d1		 sub	 edx, ecx

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000d8	52		 push	 edx
  000d9	51		 push	 ecx
  000da	56		 push	 esi
  000db	e8 00 00 00 00	 call	 _memmove

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  000e0	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e3	8b 4d f8	 mov	 ecx, DWORD PTR __Whereptr$GSCopy$1$[ebp]
  000e6	2b c1		 sub	 eax, ecx

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000e8	50		 push	 eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000e9	8b 45 fc	 mov	 eax, DWORD PTR tv618[ebp]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000ec	51		 push	 ecx
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 757  :             _Umove(_Whereptr, _Mylast, _Newvec + _Whereoff + 1);

  000ed	83 c0 04	 add	 eax, 4
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  000f0	50		 push	 eax
  000f1	e8 00 00 00 00	 call	 _memmove
  000f6	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@Emplace_re:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  000f9	8b 07		 mov	 eax, DWORD PTR [edi]
  000fb	85 c0		 test	 eax, eax
  000fd	74 2c		 je	 SHORT $LN71@Emplace_re

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ff	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00102	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00104	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00107	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010d	72 12		 jb	 SHORT $LN81@Emplace_re

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00112	83 c1 23	 add	 ecx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00115	2b c2		 sub	 eax, edx

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00117	83 c0 fc	 add	 eax, -4			; fffffffcH
  0011a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011d	77 29		 ja	 SHORT $LN78@Emplace_re

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011f	8b c2		 mov	 eax, edx
$LN81@Emplace_re:

; 195  :     ::operator delete(_Ptr, _Bytes);

  00121	51		 push	 ecx
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00128	83 c4 08	 add	 esp, 8
$LN71@Emplace_re:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1681 :         _Mylast  = _Newvec + _Newsize;

  0012b	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  0012e	89 37		 mov	 DWORD PTR [edi], esi
  00130	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  00133	8b 45 fc	 mov	 eax, DWORD PTR tv618[ebp]

; 1681 :         _Mylast  = _Newvec + _Newsize;

  00136	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00139	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  0013c	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 758  :         }
; 759  :         _CATCH_ALL
; 760  :         _Destroy(_Constructed_first, _Constructed_last);
; 761  :         _Al.deallocate(_Newvec, _Newcapacity);
; 762  :         _RERAISE;
; 763  :         _CATCH_END
; 764  : 
; 765  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 766  :         return _Newvec + _Whereoff;

  0013f	5f		 pop	 edi
  00140	5e		 pop	 esi
  00141	5b		 pop	 ebx

; 767  :     }

  00142	8b e5		 mov	 esp, ebp
  00144	5d		 pop	 ebp
  00145	c2 08 00	 ret	 8
$LN78@Emplace_re:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN85@Emplace_re:

; 91   :         _Throw_bad_array_new_length(); // add overflow

  0014e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN88@Emplace_re:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 738  :             _Xlength();

  00153	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN86@Emplace_re:
  00158	cc		 int	 3
??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$?0V?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PBD@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0V?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PBD@1@@Z PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> >, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1333 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00016	c2 08 00	 ret	 8
??$?0V?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PBD@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??$_Ucopy@PAPBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPAPBD00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAPBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPAPBD00@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * *>, COMDAT
; _this$dead$ = ecx

; 1587 :     pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Dest) { // copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0000e	2b f8		 sub	 edi, eax

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1528 :         _Dest += _ULast - _UFirst;

  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 be	 lea	 eax, DWORD PTR [esi+edi*4]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1588 :         return _Uninitialized_copy(_First, _Last, _Dest, _Getal());

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 1589 :     }

  00023	5d		 pop	 ebp
  00024	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAPBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPAPBD00@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??$_Unfancy_maybe_null@K@std@@YAPAKPAK@Z
_TEXT	SEGMENT
??$_Unfancy_maybe_null@K@std@@YAPAKPAK@Z PROC		; std::_Unfancy_maybe_null<unsigned long>, COMDAT
; __Ptr$ = ecx

; 407  :     return _Ptr;

  00000	8b c1		 mov	 eax, ecx

; 408  : }

  00002	c3		 ret	 0
??$_Unfancy_maybe_null@K@std@@YAPAKPAK@Z ENDP		; std::_Unfancy_maybe_null<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1><>, COMDAT
; _this$ = ecx
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1328 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00006	8b c1		 mov	 eax, ecx
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1328 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBDQAPBDAAV?$allocator@PBD@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBDQAPBDAAV?$allocator@PBD@0@@Z PROC ; std::_Destroy_range<std::allocator<char const *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 941  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 942  :     using _Ty = typename _Alloc::value_type;
; 943  :     if
; 944  :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 945  :             (void) _First;
; 946  :             (void) _Last;
; 947  :             (void) _Al;
; 948  :         }
; 949  :     else {
; 950  :         for (; _First != _Last; ++_First) {
; 951  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 952  :         }
; 953  :     }
; 954  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBDQAPBDAAV?$allocator@PBD@0@@Z ENDP ; std::_Destroy_range<std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT
; __Count$ = ecx

; 29   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;
; 30   : 
; 31   :     if
; 32   :         _CONSTEXPR_IF(_Overflow_is_possible) {
; 33   :             constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 34   :             if (_Count > _Max_possible) {

  00000	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00006	0f 87 00 00 00
	00		 ja	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 35   :                 _Throw_bad_array_new_length(); // multiply overflow
; 36   :             }
; 37   :         }
; 38   : 
; 39   :     return _Count * _Ty_size;

  0000c	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]

; 40   : }

  00013	c3		 ret	 0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT
; __Bytes$ = ecx

; 172  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 173  : #if defined(_M_IX86) || defined(_M_X64)
; 174  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00000	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00006	72 2a		 jb	 SHORT $LN2@Allocate

; 89   :     const size_t _Block_size = _Non_user_size + _Bytes;

  00008	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 90   :     if (_Block_size <= _Bytes) {

  0000b	3b c1		 cmp	 eax, ecx
  0000d	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 51   :         return ::operator new(_Bytes);

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 94   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00019	8b c8		 mov	 ecx, eax

; 51   :         return ::operator new(_Bytes);

  0001b	83 c4 04	 add	 esp, 4

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001e	85 c9		 test	 ecx, ecx
  00020	74 0a		 je	 SHORT $LN11@Allocate

; 96   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00022	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00025	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 97   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00028	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 184  : }

  0002b	c3		 ret	 0
$LN11@Allocate:

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Allocate:

; 175  :         return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
; 176  :     }
; 177  : #endif // defined(_M_IX86) || defined(_M_X64)
; 178  : 
; 179  :     if (_Bytes != 0) {

  00032	85 c9		 test	 ecx, ecx
  00034	74 0a		 je	 SHORT $LN3@Allocate

; 51   :         return ::operator new(_Bytes);

  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	83 c4 04	 add	 esp, 4

; 184  : }

  0003f	c3		 ret	 0
$LN3@Allocate:

; 180  :         return _Traits::_Allocate(_Bytes);
; 181  :     }
; 182  : 
; 183  :     return nullptr;

  00040	33 c0		 xor	 eax, eax

; 184  : }

  00042	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT
; __Ptr$ = ecx
; __Bytes$ = edx

; 188  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 189  : #if defined(_M_IX86) || defined(_M_X64)
; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00000	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00006	72 14		 jb	 SHORT $LN13@Deallocate

; 108  :     _Bytes += _Non_user_size;

  00008	56		 push	 esi

; 109  : 
; 110  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);
; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00009	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0000c	83 c2 23	 add	 edx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0000f	2b ce		 sub	 ecx, esi

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00011	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00014	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00017	77 0e		 ja	 SHORT $LN10@Deallocate

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00019	8b ce		 mov	 ecx, esi
  0001b	5e		 pop	 esi
$LN13@Deallocate:

; 191  :         _Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 192  :     }
; 193  : #endif // defined(_M_IX86) || defined(_M_X64)
; 194  : 
; 195  :     ::operator delete(_Ptr, _Bytes);

  0001c	52		 push	 edx
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00023	83 c4 08	 add	 esp, 8

; 196  : }

  00026	c3		 ret	 0
$LN10@Deallocate:

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN15@Deallocate:
  0002d	cc		 int	 3
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 941  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 942  :     using _Ty = typename _Alloc::value_type;
; 943  :     if
; 944  :         _CONSTEXPR_IF(conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 945  :             (void) _First;
; 946  :             (void) _Last;
; 947  :             (void) _Al;
; 948  :         }
; 949  :     else {
; 950  :         for (; _First != _Last; ++_First) {
; 951  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 952  :         }
; 953  :     }
; 954  : }

  00000	c2 00 00	 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAKQAKAAV?$allocator@K@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >, COMDAT
; _this$ = ecx

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@K@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned long> >::_Vector_val<std::_Simple_types<unsigned long> >, COMDAT
; _this$ = ecx

; 374  :     _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@K@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned long> >::_Vector_val<std::_Simple_types<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength, COMDAT

; 1704 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN3@Xlength:
  0000b	cc		 int	 3
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Change_array, COMDAT
; _this$ = ecx

; 1666 :     void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1667 :         // orphan all iterators, discard old array, acquire new array
; 1668 :         auto& _My_data    = _Mypair._Myval2;
; 1669 :         pointer& _Myfirst = _My_data._Myfirst;
; 1670 :         pointer& _Mylast  = _My_data._Mylast;
; 1671 :         pointer& _Myend   = _My_data._Myend;
; 1672 : 
; 1673 :         _My_data._Orphan_all();
; 1674 : 
; 1675 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 1676 :             _Destroy(_Myfirst, _Mylast);
; 1677 :             _Getal().deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 780  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 190  :     if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 111  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 112  : 
; 113  :     // If the following asserts, it likely means that we are performing
; 114  :     // an aligned delete on memory coming from an unaligned allocation.
; 115  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 116  : 
; 117  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 118  :     // in range [_Min_back_shift, _Non_user_size]
; 119  : #ifdef _DEBUG
; 120  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 121  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 122  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 123  : #endif // _DEBUG
; 124  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 126  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 195  :     ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1680 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1681 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1682 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 1683 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 125  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  0005a	cc		 int	 3
?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Calculate_growth@?$vector@KV?$allocator@K@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@KV?$allocator@K@std@@@std@@ABEII@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1615 :     size_type _Calculate_growth(const size_type _Newsize) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 : 
; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00006	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000d	c1 fa 02	 sar	 edx, 2

; 1616 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1617 :         const size_type _Oldcapacity = capacity();
; 1618 : 
; 1619 :         if (_Oldcapacity > max_size() - _Oldcapacity / 2) {

  00010	8b ca		 mov	 ecx, edx
  00012	d1 e9		 shr	 ecx, 1
  00014	2b c1		 sub	 eax, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	77 08		 ja	 SHORT $LN7@Calculate_

; 1620 :             return _Newsize; // geometric growth would overflow
; 1621 :         }
; 1622 : 
; 1623 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0001a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 1624 : 
; 1625 :         if (_Geometric < _Newsize) {

  0001d	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00020	73 03		 jae	 SHORT $LN1@Calculate_
$LN7@Calculate_:

; 1626 :             return _Newsize; // geometric growth would be insufficient

  00022	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
$LN1@Calculate_:

; 1627 :         }
; 1628 : 
; 1629 :         return _Geometric; // geometric growth is sufficient
; 1630 :     }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@KV?$allocator@K@std@@@std@@ABEII@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx

; 1605 :     void _Umove_if_noexcept(pointer _First, pointer _Last, pointer _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0000c	2b c2		 sub	 eax, edx

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000e	50		 push	 eax
  0000f	52		 push	 edx
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1609 :     }

  00019	5d		 pop	 ebp
  0001a	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Umove@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove, COMDAT
; _this$dead$ = ecx

; 1591 :     pointer _Umove(pointer _First, pointer _Last, pointer _Dest) { // move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0000e	2b f8		 sub	 edi, eax

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1655 :         return _Dest + (_ULast - _UFirst);

  0001b	c1 ff 02	 sar	 edi, 2
  0001e	8d 04 be	 lea	 eax, DWORD PTR [esi+edi*4]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1592 :         return _Uninitialized_move(_First, _Last, _Dest, _Getal());

  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 1593 :     }

  00023	5d		 pop	 ebp
  00024	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$dead$ = ecx

; 1488 :         return _Min_value(

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1489 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1490 :     }

  00005	c3		 ret	 0
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@K@std@@QAE@XZ PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 772  :     constexpr allocator() noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@K@std@@QAE@XZ ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx

; 1595 :     void _Umove_if_noexcept1(pointer _First, pointer _Last, pointer _Dest, true_type) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00009	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0000c	2b c2		 sub	 eax, edx

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000e	50		 push	 eax
  0000f	52		 push	 edx
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 _memmove
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector

; 1598 :     }

  00019	5d		 pop	 ebp
  0001a	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\vector
;	COMDAT ?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity, COMDAT
; _this$ = ecx

; 1493 :         auto& _My_data = _Mypair._Myval2;
; 1494 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1495 :     }

  00008	c3		 ret	 0
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned long> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 680  :         return static_cast<size_t>(-1) / sizeof(value_type);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 681  :     }

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\type_traits
;	COMDAT ??$forward@V?$allocator@PBD@std@@@std@@YA$$QAV?$allocator@PBD@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$allocator@PBD@std@@@std@@YA$$QAV?$allocator@PBD@0@AAV10@@Z PROC ; std::forward<std::allocator<char const *> >, COMDAT
; __Arg$ = ecx

; 1455 :     return static_cast<_Ty&&>(_Arg);

  00000	8b c1		 mov	 eax, ecx

; 1456 : }

  00002	c3		 ret	 0
??$forward@V?$allocator@PBD@std@@@std@@YA$$QAV?$allocator@PBD@0@AAV10@@Z ENDP ; std::forward<std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD0PAPBDAAV?$allocator@PBD@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD0PAPBDAAV?$allocator@PBD@0@@Z PROC ; std::_Uninitialized_copy<char const * *,std::allocator<char const *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1517 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1528 :         _Dest += _ULast - _UFirst;

  00017	c1 ff 02	 sar	 edi, 2
  0001a	8d 04 be	 lea	 eax, DWORD PTR [esi+edi*4]

; 1529 :         (void) _Al;
; 1530 :     } else {
; 1531 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1532 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1533 :             _Backout._Emplace_back(*_UFirst);
; 1534 :         }
; 1535 : 
; 1536 :         _Dest = _Backout._Release();
; 1537 :     }
; 1538 : 
; 1539 :     return _Dest;

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 1540 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninitialized_copy@PAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD0PAPBDAAV?$allocator@PBD@0@@Z ENDP ; std::_Uninitialized_copy<char const * *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAPBD@std@@YAPAPBDABQAPBD@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAPBD@std@@YAPAPBDABQAPBD@Z PROC	; std::_Get_unwrapped<char const * * const &>, COMDAT
; __It$ = ecx

; 1197 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1198 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1199 :         return _It + 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1200 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1201 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1202 :     } else {
; 1203 :         return static_cast<_Iter&&>(_It);
; 1204 :     }
; 1205 : }

  00002	c3		 ret	 0
??$_Get_unwrapped@ABQAPBD@std@@YAPAPBDABQAPBD@Z ENDP	; std::_Get_unwrapped<char const * * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAK@std@@YAPAKABQAK@Z
_TEXT	SEGMENT
??$_Get_unwrapped@ABQAK@std@@YAPAKABQAK@Z PROC		; std::_Get_unwrapped<unsigned long * const &>, COMDAT
; __It$ = ecx

; 1197 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1198 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1199 :         return _It + 0;

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1200 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1201 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1202 :     } else {
; 1203 :         return static_cast<_Iter&&>(_It);
; 1204 :     }
; 1205 : }

  00002	c3		 ret	 0
??$_Get_unwrapped@ABQAK@std@@YAPAKABQAK@Z ENDP		; std::_Get_unwrapped<unsigned long * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT
; __Bytes$ = ecx

; 88   :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 89   :     const size_t _Block_size = _Non_user_size + _Bytes;

  00000	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 90   :     if (_Block_size <= _Bytes) {

  00003	3b c1		 cmp	 eax, ecx
  00005	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 51   :         return ::operator new(_Bytes);

  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 91   :         _Throw_bad_array_new_length(); // add overflow
; 92   :     }
; 93   : 
; 94   :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00011	8b c8		 mov	 ecx, eax

; 51   :         return ::operator new(_Bytes);

  00013	83 c4 04	 add	 esp, 4

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00016	85 c9		 test	 ecx, ecx
  00018	74 0a		 je	 SHORT $LN7@Allocate_m

; 96   :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  0001a	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0001d	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 97   :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00020	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 98   : 
; 99   : #ifdef _DEBUG
; 100  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 101  : #endif // _DEBUG
; 102  :     return _Ptr;
; 103  : }

  00023	c3		 ret	 0
$LN7@Allocate_m:

; 95   :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00024	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z PROC ; std::_Uninitialized_move<unsigned long *,std::allocator<unsigned long> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1646 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility

; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xmemory

; 1655 :         return _Dest + (_ULast - _UFirst);

  00017	c1 ff 02	 sar	 edi, 2
  0001a	8d 04 be	 lea	 eax, DWORD PTR [esi+edi*4]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi

; 1656 :         (void) _Al;
; 1657 :     } else {
; 1658 :         _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1659 :         for (; _UFirst != _ULast; ++_UFirst) {
; 1660 :             _Backout._Emplace_back(_STD move(*_UFirst));
; 1661 :         }
; 1662 : 
; 1663 :         return _Backout._Release();
; 1664 :     }
; 1665 : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??$_Uninitialized_move@PAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ENDP ; std::_Uninitialized_move<unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xstddef
;	COMDAT ??$_Unfancy@PBD@std@@YAPAPBDPAPBD@Z
_TEXT	SEGMENT
??$_Unfancy@PBD@std@@YAPAPBDPAPBD@Z PROC		; std::_Unfancy<char const *>, COMDAT
; __Ptr$ = ecx

; 289  :     return _Ptr;

  00000	8b c1		 mov	 eax, ecx

; 290  : }

  00002	c3		 ret	 0
??$_Unfancy@PBD@std@@YAPAPBDPAPBD@Z ENDP		; std::_Unfancy<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
;	COMDAT ??$_Copy_memmove@PAPBDPAPBD@std@@YAPAPBDPAPBD00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAPBDPAPBD@std@@YAPAPBDPAPBD00@Z PROC	; std::_Copy_memmove<char const * *,char const * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 3749 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3750 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 3751 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 3752 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3755 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 3756 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PAPBDPAPBD@std@@YAPAPBDPAPBD00@Z ENDP	; std::_Copy_memmove<char const * *,char const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Visual Studio IDE\VC\Tools\MSVC\14.26.28801\include\xutility
;	COMDAT ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z PROC		; std::_Copy_memmove<unsigned long *,unsigned long *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 3749 : _OutIt _Copy_memmove(_InIt _First, _InIt _Last, _OutIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3750 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_First));
; 3751 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_Last));
; 3752 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<volatile char*>(_Dest));
; 3753 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
; 3754 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3755 :     return reinterpret_cast<_OutIt>(_Dest_ch + _Count);

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 3756 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ENDP		; std::_Copy_memmove<unsigned long *,unsigned long *>
_TEXT	ENDS
END
